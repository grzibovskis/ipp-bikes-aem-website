"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const less_tree_1 = __importDefault(require("less-tree"));
const path_1 = __importDefault(require("path"));
const recursive_readdir_1 = __importDefault(require("recursive-readdir"));
const tree_model_1 = __importDefault(require("tree-model"));
class StyleTree {
    constructor(relativeJcrPath) {
        this.tree = new tree_model_1.default();
        this.jcrRootDir = path_1.default.resolve(relativeJcrPath);
    }
    init() {
        const model = {
            children: [],
            filePath: path_1.default.sep,
            id: path_1.default.sep,
            isMissing: false,
            type: "root"
        };
        const sw = Date.now();
        return new Promise((resolve, reject) => {
            recursive_readdir_1.default(this.jcrRootDir, (err, files) => {
                console.log("Read file tree: " + (Date.now() - sw) + " ms");
                if (err) {
                    reject(err);
                    return;
                }
                let swInner = Date.now();
                const rootFilesRegex = /((css|js)\.txt|(\.content\.xml))$/i;
                const contentXmlFilesJcr = [];
                const jsTxtFilesJcr = [];
                const cssTxtFilesJcr = [];
                const otherFilesJcr = [];
                files.forEach(filePath => {
                    const filePathJcr = path_1.default.join(path_1.default.sep, path_1.default.relative(this.jcrRootDir, filePath));
                    let match;
                    if ((match = rootFilesRegex.exec(filePathJcr)) !== null) {
                        if (match[3]) {
                            contentXmlFilesJcr.push(filePathJcr);
                        }
                        else if (match[2] === "css") {
                            cssTxtFilesJcr.push(filePathJcr);
                        }
                        else if (match[2] === "js") {
                            jsTxtFilesJcr.push(filePathJcr);
                        }
                        else {
                            otherFilesJcr.push(filePathJcr);
                        }
                    }
                });
                swInner = Date.now();
                cssTxtFilesJcr.forEach(cssTxtFileJcr => {
                    const contentFileJcr = path_1.default.join(path_1.default.dirname(cssTxtFileJcr), ".content.xml");
                    if (contentXmlFilesJcr.indexOf(contentFileJcr) === -1) {
                        return;
                    }
                    const cssTxtModel = this.getCssTxtModel(cssTxtFileJcr);
                    model.children.push(cssTxtModel);
                });
                swInner = Date.now();
                this.rootNode = this.tree.parse(model);
                console.log("Build style tree: " + (Date.now() - sw) + " ms");
                resolve();
            });
        });
    }
    findClientlibs(filePathJcr) {
        return this.findClientlibsInternal(this.rootNode, filePathJcr);
    }
    getCssTxtModel(cssTxtFileJcr) {
        const basePathJcr = path_1.default.dirname(cssTxtFileJcr);
        const cssTxtModel = {
            children: [],
            filePath: cssTxtFileJcr,
            id: cssTxtFileJcr,
            isMissing: false,
            type: "csstxt"
        };
        try {
            const contents = fs_1.default.readFileSync(path_1.default.join(this.jcrRootDir, cssTxtFileJcr), "utf8");
            const arrayOfLines = contents.match(/[^\r\n]+/g);
            if (arrayOfLines && arrayOfLines.length > 0) {
                let prefix = "";
                arrayOfLines.forEach((line) => {
                    const baseMatch = /#base=(.*)/.exec(line);
                    if (baseMatch !== null) {
                        prefix = baseMatch[1];
                    }
                    else {
                        const sourceLine = line.trim();
                        if (sourceLine.indexOf("//") !== 0) {
                            const sourceFileJcr = path_1.default.isAbsolute(sourceLine)
                                ? sourceLine
                                : path_1.default.join(basePathJcr, prefix, sourceLine);
                            const sourceModel = this.getSourceModel(sourceFileJcr);
                            cssTxtModel.children.push(sourceModel);
                        }
                    }
                });
            }
            else {
            }
        }
        catch (err) {
            cssTxtModel.isMissing = true;
        }
        return cssTxtModel;
    }
    getSourceModel(sourceFileJcr) {
        sourceFileJcr = path_1.default.normalize(sourceFileJcr);
        const sourceModel = {
            children: [],
            filePath: sourceFileJcr,
            id: sourceFileJcr,
            isMissing: false,
            type: "source"
        };
        if (path_1.default.extname(sourceFileJcr) === ".less") {
            sourceModel.type = "less";
            const newLessTree = this._getLessTree(sourceFileJcr);
            const importModels = this.lessTree2Model(newLessTree);
            sourceModel.children = importModels.children;
            sourceModel.isMissing = importModels.isMissing;
        }
        return sourceModel;
    }
    lessTree2Model(newLessTree) {
        const filePathJcr = path_1.default.join(path_1.default.sep, path_1.default.relative(this.jcrRootDir, newLessTree.path));
        const model = {
            children: [],
            filePath: filePathJcr,
            id: filePathJcr,
            isMissing: !newLessTree.contents,
            type: "less-import"
        };
        if (newLessTree.children) {
            newLessTree.children.forEach(child => {
                const childModel = this.lessTree2Model(child);
                model.children.push(childModel);
            });
        }
        return model;
    }
    findClientlibsInternal(rootNode, filePathJcr) {
        let pathIndex;
        (function (pathIndex) {
            pathIndex[pathIndex["root"] = 0] = "root";
            pathIndex[pathIndex["clientlib"] = 1] = "clientlib";
            pathIndex[pathIndex["less"] = 2] = "less";
            pathIndex[pathIndex["import"] = 3] = "import";
        })(pathIndex || (pathIndex = {}));
        const sw = Date.now();
        this._getLessTree("", true);
        const clientlibCssPaths = [];
        const nodes = rootNode.all(node => node.model.id === filePathJcr);
        nodes.forEach(node => {
            const nodePath = node.getPath();
            if (nodePath && nodePath.length > pathIndex.clientlib) {
                const clientlibNode = nodePath[pathIndex.clientlib];
                const clientlibCss = path_1.default.dirname(clientlibNode.model.id) + ".css";
                if (clientlibCssPaths.indexOf(clientlibCss) === -1) {
                    clientlibCssPaths.push(clientlibCss);
                }
            }
            if (node.hasChildren() || node.model.isMissing) {
                this.updateClientlibs(rootNode, node);
            }
        });
        if (nodes.length === 0 && path_1.default.basename(filePathJcr) === "css.txt") {
            console.log("Missing css.txt, so add", filePathJcr);
            this.updateClientlibs(rootNode, filePathJcr);
        }
        return clientlibCssPaths;
    }
    updateClientlibs(rootNode, node) {
        let newModel;
        if (typeof node === "string") {
            if (path_1.default.basename(node) === "css.txt") {
                console.log("updateClientlibs add new csstxt");
                newModel = this.getCssTxtModel(node);
            }
        }
        else {
            if (["less", "less-import"].indexOf(node.model.type) > -1) {
                newModel = this.getSourceModel(node.model.id);
            }
            else if (["csstxt"].indexOf(node.model.type) > -1) {
                console.log("updateClientlibs csstxt");
                newModel = this.getCssTxtModel(node.model.id);
            }
        }
        if (newModel) {
            const newNode = this.tree.parse(newModel);
            if (typeof node === "string") {
                rootNode.addChild(newNode);
            }
            else {
                const parentNode = node.parent;
                const index = node.getIndex();
                node.drop();
                parentNode.addChildAtIndex(newNode, index);
            }
            return newModel;
        }
    }
    copyFileSync(srcFile, destFile) {
        let BUF_LENGTH;
        let buff;
        let bytesRead;
        let fdr;
        let fdw;
        let pos;
        BUF_LENGTH = 64 * 1024;
        buff = new Buffer(BUF_LENGTH);
        fdr = fs_1.default.openSync(srcFile, "r");
        fdw = fs_1.default.openSync(destFile, "w");
        bytesRead = 1;
        pos = 0;
        while (bytesRead > 0) {
            bytesRead = fs_1.default.readSync(fdr, buff, 0, BUF_LENGTH, pos);
            fs_1.default.writeSync(fdw, buff, 0, bytesRead);
            pos += bytesRead;
        }
        fs_1.default.closeSync(fdr);
        return fs_1.default.closeSync(fdw);
    }
    _getLessTree(file, resetCache) {
        resetCache = !!resetCache;
        const tree = less_tree_1.default(path_1.default.join(this.jcrRootDir, file), this.jcrRootDir, resetCache);
        return tree;
    }
}
exports.StyleTree = StyleTree;
//# sourceMappingURL=style-tree.js.map