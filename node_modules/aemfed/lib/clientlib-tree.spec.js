"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const graceful_fs_1 = __importDefault(require("graceful-fs"));
require("mocha");
const path_1 = __importDefault(require("path"));
const sinon = __importStar(require("sinon"));
const clientlib_tree_1 = require("./clientlib-tree");
const rpn = require("request-promise-native");
describe("clientlib-tree", function () {
    let sandbox;
    beforeEach(() => {
        sandbox = sinon.createSandbox();
    });
    afterEach(() => {
        sandbox.restore();
    });
    describe("new clientlib tree", function () {
        let resolveStub;
        beforeEach(function () {
            resolveStub = sandbox.stub(rpn, "Request").resolves("");
        });
        afterEach(function () {
            resolveStub.restore();
        });
        it("uses default name and server", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                chai_1.expect(resolveStub.firstCall.args[0].uri).to.equal("http://admin:admin@localhost:4502/libs/granite/ui/content/dumplibs.html");
            });
        });
        it("uses custom name and server", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree({
                name: "name",
                server: "server"
            });
            return clientlibTree.init().then(() => {
                chai_1.expect(resolveStub.firstCall.args[0].uri).to.equal("server/libs/granite/ui/content/dumplibs.html");
            });
        });
        it("uses custom name, server and dumplibsPath", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree({
                dumpLibsPath: "/dumplibs",
                name: "name",
                server: "server"
            });
            return clientlibTree.init().then(() => {
                chai_1.expect(resolveStub.firstCall.args[0].uri).to.equal("server/dumplibs");
            });
        });
    });
    describe("init libs", function () {
        it("fills libs", function () {
            const dumplibsHtml = graceful_fs_1.default.readFileSync(path_1.default.join(__dirname, "../test/aem64-dumplibs-author-4502.html"), "utf8");
            const resolveStub = sandbox
                .stub(rpn, "Request")
                .resolves(dumplibsHtml);
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(libs => {
                chai_1.expect(libs).to.exist;
                chai_1.expect(resolveStub.calledOnce).to.be.true;
                chai_1.expect(libs.size).to.equal(3);
                chai_1.expect(libs).to.have.all.keys("/apps/clientlibs/social/themes/sitethemes/bootstrap-weretail/clientlibs", "/apps/community-components/clientlibs/codemirror", "/apps/community-components/clientlibs/guide");
                const lib = libs.get("/apps/community-components/clientlibs/guide");
                chai_1.expect(lib).to.exist;
                if (lib) {
                    chai_1.expect(lib).to.deep.equal({
                        categories: ["cq.social.componentguide"],
                        channels: [],
                        css: "http://localhost:4502/apps/community-components/clientlibs/guide.css",
                        dependencies: ["/libs/foundation/clientlibs/shared"],
                        embedded: [
                            "/libs/clientlibs/social/thirdparty/bootstrap3",
                            "/apps/community-components/components/basepage/clientlibs",
                            "/apps/community-components/components/editors/hbs/clientlibs",
                            "/apps/community-components/components/editors/css/clientlibs",
                            "/apps/community-components/components/editors/data/clientlibs",
                            "/apps/community-components/clientlibs/codemirror"
                        ],
                        js: "http://localhost:4502/apps/community-components/clientlibs/guide.js",
                        name: "/apps/community-components/clientlibs/guide",
                        theme: ""
                    });
                }
            });
        });
    });
    describe("findClientlibs", function () {
        const dumplibsHtml = graceful_fs_1.default.readFileSync(path_1.default.join(__dirname, "../test/aem64-dumplibs-author-4502.html"), "utf8");
        let resolveStub;
        beforeEach(function () {
            resolveStub = sandbox.stub(rpn, "Request").resolves(dumplibsHtml);
        });
        afterEach(function () {
            resolveStub.restore();
        });
        it("returns nothing if not found", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libs = clientlibTree.findClientlibs("/does-not-exist");
                chai_1.expect(libs).has.lengthOf(0);
            });
        });
        it("returns direct path", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libs = clientlibTree.findClientlibs("/apps/clientlibs/social/themes/sitethemes/bootstrap-weretail/clientlibs");
                chai_1.expect(libs).has.lengthOf(1);
            });
        });
        it("returns lib where path is part of embedded", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libs = clientlibTree.findClientlibs("/apps/community-components/components/basepage/clientlibs");
                chai_1.expect(libs).has.lengthOf(1);
            });
        });
        it("returns both direct and embedded", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libs = clientlibTree.findClientlibs("/apps/community-components/clientlibs/codemirror");
                chai_1.expect(libs).has.lengthOf(2);
            });
        });
        it("returns nothing if dependency", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libs = clientlibTree.findClientlibs("/libs/foundation/clientlibs/shared");
                chai_1.expect(libs).has.lengthOf(0);
            });
        });
    });
    describe("findProxyTarget (etc.clientlibs)", function () {
        const dumplibsHtml = graceful_fs_1.default.readFileSync(path_1.default.join(__dirname, "../test/aem64-dumplibs-author-4502.html"), "utf8");
        let resolveStub;
        beforeEach(function () {
            resolveStub = sandbox.stub(rpn, "Request").resolves(dumplibsHtml);
        });
        afterEach(function () {
            resolveStub.restore();
        });
        it("returns nothing if not found", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libPath = clientlibTree.findProxyTarget("/does-not-exist");
                chai_1.expect(libPath).does.not.exist;
            });
        });
        it("returns apps path if provided a matching etc.clientlibs", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libPath = clientlibTree.findProxyTarget("/etc.clientlibs/community-components/clientlibs/guide");
                chai_1.expect(libPath).to.equal("/apps/community-components/clientlibs/guide");
            });
        });
        it("returns same path if provided a direct path", function () {
            const clientlibTree = new clientlib_tree_1.ClientlibTree();
            return clientlibTree.init().then(() => {
                const libPath = clientlibTree.findProxyTarget("/apps/community-components/clientlibs/guide");
                chai_1.expect(libPath).to.equal("/apps/community-components/clientlibs/guide");
            });
        });
    });
});
//# sourceMappingURL=clientlib-tree.spec.js.map